<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceStack.Server</name>
    </assembly>
    <members>
        <member name="P:ServiceStack.AutoQueryViewerConfig.ServiceBaseUrl">
            <summary>
            The BaseUrl of the ServiceStack instance (inferred)
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.ServiceName">
            <summary>
            Name of the ServiceStack Instance (inferred)
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.ServiceDescription">
            <summary>
            Textual description of the AutoQuery Services (shown in Home Services list)
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.ServiceIconUrl">
            <summary>
            Icon for this ServiceStack Instance (shown in Home Services list)
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.IsPublic">
            <summary>
            Whether to publish this Service to the public Services registry
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.OnlyShowAnnotatedServices">
            <summary>
            Only show AutoQuery Services attributed with [AutoQueryViewer]
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.ImplicitConventions">
            <summary>
            List of different Search Filters available
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.DefaultSearchField">
            <summary>
            The Column which should be selected by default
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.DefaultSearchType">
            <summary>
            The Query Type filter which should be selected by default
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.DefaultSearchText">
            <summary>
            The search text which should be populated by default
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.BrandUrl">
            <summary>
            Link to your website users can click to find out more about you
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.BrandImageUrl">
            <summary>
            A custom logo or image that users can click on to visit your site
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.TextColor">
            <summary>
            The default color of text
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.LinkColor">
            <summary>
            The default color of links
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.BackgroundColor">
            <summary>
            The default background color of each screen
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.BackgroundImageUrl">
            <summary>
            The default background image of each screen anchored to the bottom left
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.IconUrl">
            <summary>
            The default icon for each of your AutoQuery Services
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.Client">
            <summary>
            Base rcon class.
            </summary>
        </member>
        <member name="F:ServiceStack.Messaging.Rcon.Client._sock">
            <summary>
            Rcon connection socket. Always set to null when not connected.
            </summary>
        </member>
        <member name="F:ServiceStack.Messaging.Rcon.Client._sequenceID">
            <summary>
            Unique ID for each message.
            </summary>
        </member>
        <member name="F:ServiceStack.Messaging.Rcon.Client._registeredCallbacks">
            <summary>
            Registered callbacks.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.#ctor(System.Net.IPEndPoint)">
            <summary>
            Create a new instance of rcon.
            </summary>
            <param name="rconEndpoint">Endpoint to connect to, usually the game server with query port.</param>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.Connect">
            <summary>
            Attempts to connect to the game server for rcon operations.
            </summary>
            <returns>True if connection established, false otherwise.</returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.ProcessPacket(System.Byte[],ServiceStack.Messaging.Rcon.ClientSocketState)">
            <summary>
            Processes a received packet.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.Disconnect">
            <summary>
            Disconnects from rcon.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.InternalSend(System.Byte[][])">
            <summary>
            Sends message to the server.
            </summary>
            <param name="words">Words to send.</param>
        </member>
        <member name="E:ServiceStack.Messaging.Rcon.Client.OnDisconnected">
            <summary>
            Disconnected event.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.Endpoint">
            <summary>
            Game server endpoint.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.LastException">
            <summary>
            Last exception that occured during operation.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.Connected">
            <summary>
            Connected?
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.SequenceID">
            <summary>
            Gets the next unique ID to be used for transmisson. Read this before sending to pair responses to sent messages.
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.Client.OnDisconnectedHandler">
            <summary>
            Event delegate when disconnected from the server.
            </summary>
            <param name="rcon"></param>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.Client.AsyncCallback">
            <summary>
            Delegate for async callbacks.
            </summary>
            <param name="rcon"></param>
            <param name="packet"></param>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.NotConnectedException">
            <summary>
            Exception thrown when attempting to send on a non-connected service client.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.FromServer">
            <summary>
            True if the packet originated on the server.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.IsResponse">
            <summary>
            True if the packet is a response from a sent packet.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.Sequence">
            <summary>
            Sequence identifier. Unique to the connection.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.Words">
            <summary>
            Words.
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.PacketCodec">
            <summary>
            Contains methods required for encoding and decoding rcon packets.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.DecodePacket(System.Byte[])">
            <summary>
            Decodes a packet.
            </summary>
            <param name="packet">The packet.</param>
            <returns>A packet object.</returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.DecodeHeader(System.Byte[])">
            <summary>
            Decodes the packet header.
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.DecodeWords(System.Byte[])">
            <summary>
            Decodes words in a packet.
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.EncodePacket(System.Boolean,System.Boolean,System.UInt32,System.Byte[][])">
            <summary>
            Encodes a packet for transmission to the server.
            </summary>
            <param name="fromServer"></param>
            <param name="isResponse"></param>
            <param name="id"></param>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.EncodeHeader(System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Encodes a packet header.
            </summary>
            <param name="fromServer"></param>
            <param name="isResponse"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.EncodeWords(System.Byte[][])">
            <summary>
            Encodes words.
            </summary>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.ProcessingClient">
            <summary>
            Processing client used to interface with ServiceStack and allow a message to be processed.
            Not an actual client.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.ProcessingClient.Publish(System.String,ServiceStack.Messaging.IMessage)">
            <summary>
            Publish the specified message into the durable queue @queueName
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.ProcessingClient.Notify(System.String,ServiceStack.Messaging.IMessage)">
            <summary>
            Publish the specified message into the transient queue @queueName
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.ProcessingClient.Get``1(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Synchronous blocking get.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.ProcessingClient.GetAsync``1(System.String)">
            <summary>
            Non blocking get message
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Redis.RedisMqServer">
            <summary>
            Creates a Redis MQ Server that processes each message on its own background thread.
            i.e. if you register 3 handlers it will create 7 background threads:
              - 1 listening to the Redis MQ Subscription, getting notified of each new message
              - 3x1 Normal InQ for each message handler
              - 3x1 PriorityQ for each message handler (Turn off with DisablePriorityQueues)
            
            When RedisMqServer Starts it creates a background thread subscribed to the Redis MQ Topic that
            listens for new incoming messages. It also starts 2 background threads for each message type:
             - 1 for processing the services Priority Queue and 1 processing the services normal Inbox Queue.
            
            Priority Queue's can be enabled on a message-per-message basis by specifying types in the 
            OnlyEnablePriortyQueuesForTypes property. The DisableAllPriorityQueues property disables all Queues.
            
            The Start/Stop methods are idempotent i.e. It's safe to call them repeatedly on multiple threads 
            and the Redis MQ Server will only have Started or Stopped once.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.RequestFilter">
            <summary>
            Execute global transformation or custom logic before a request is processed.
            Must be thread-safe.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.ResponseFilter">
            <summary>
            Execute global transformation or custom logic on the response.
            Must be thread-safe.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.ErrorHandler">
            <summary>
            Execute global error handler logic. Must be thread-safe.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.PriortyQueuesWhitelist">
            <summary>
            If you only want to enable priority queue handlers (and threads) for specific msg types
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.DisablePriorityQueues">
            <summary>
            Don't listen on any Priority Queues
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.PublishResponsesWhitelist">
            <summary>
            Opt-in to only publish responses on this white list. 
            Publishes all responses by default.
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Redis.RedisTransientMessageFactory">
            <summary>
            Transient message queues are a one-pass message queue service that starts
            processing messages when Start() is called. Any subsequent Start() calls 
            while the service is running is ignored.
            
            The transient service will continue to run until all messages have been 
            processed after which time it will shutdown all processing until Start() is called again.
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.Server">
            <summary>
            Hosting services via a binary-safe TCP-based protocol.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.RegisterHandler``1(System.Func{ServiceStack.Messaging.IMessage{``0},System.Object})">
            <summary>
            Register DTOs and hanlders the MQ Host will process
            </summary>
            <typeparam name="T"></typeparam>
            <param name="processMessageFn"></param>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.GetStatus">
            <summary>
            Get Total Current Stats for all Message Handlers
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.GetStatsDescription">
            <summary>
            Get a Stats dump
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.Start">
            <summary>
            Start the MQ Host. Stops the server and restarts if already started.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.Stop">
            <summary>
            Stop the MQ Host if not already stopped. 
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.ProcessPacket(System.Byte[],System.Net.Sockets.Socket,ServiceStack.Messaging.Rcon.ClientSocketState)">
            <summary>
            Processes a received packet.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Server.MessageFactory">
            <summary>
            Factory to create consumers and producers that work with this service
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Storage.SqlServerStorage">
            <summary>
            Understands how to store a <see cref="T:ServiceStack.MiniProfiler.Profiler"/> to a MSSQL database.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Storage.SqlServerStorage.TableCreationScript">
            <summary>
            Creates needed tables. Run this once on your database.
            </summary>
            <remarks>
            Works in sql server and sqlite (with documented removals).
            </remarks>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.SqlServerStorage.#ctor(System.String)">
            <summary>
            Returns a new <see cref="T:ServiceStack.MiniProfiler.Storage.SqlServerStorage"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.SqlServerStorage.Save(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Stores <param name="profiler"/> to dbo.MiniProfilers under its <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>; 
            stores all child Timings and SqlTimings to their respective tables.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.SqlServerStorage.Load(System.Guid)">
            <summary>
            Loads the MiniProfiler identifed by 'id' from the database.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.SqlServerStorage.GetUnviewedIds(System.String)">
            <summary>
            Returns a list of <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <see cref="!:Profiler.Settings.UserProvider"/>.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.SqlServerStorage.GetConnection">
            <summary>
            Returns a connection to Sql Server.
            </summary>
        </member>
    </members>
</doc>
